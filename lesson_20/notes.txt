//:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://
//:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://
//:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://


//// TASK \\\\//// TASK \\\\//// TASK \\\\//// TASK \\\\//// TASK \\\\//// TASK


///// WHAT TO DO /////

1) Write a CRUD in Laravel.

    1. It should have 5 entities:
        Users
        Projects
        Labels
        Countries
        Continents

    2. It should be possible to add multiple PROJECTS
    to multiple USERS and multiple LABELS to multiple PROJECTS.

        FOR EXAMPLE:
        USER “John” has created a PROJECT “MyWebsite”
        and added LABELS “personal” & “wordpress” to it.
            “John”:
                “MyWebsite”:
                    “personal”
                    “wordpress”

        USER “Luis” has created a PROJECT “WorkProjectX”
        and added no LABELS.
            “Luis”:
                “WorkProjectX”:
                    NONE

        USER “Happy” has PROJECTS “MyWebsite”
        and “WorkProjectX” linked.
            “Happy”:
                “MyWebsite” (of “John”):
                    “personal”
                    “wordpress”
                “WorkProjectX” (of “Luis”):
                    NONE



    //DONE// but can be only deleted by a USER who created it. //DONE//
    //DONE// LABELS can be deleted only by a USER who created it. //DONE//


    3. PROJECTS are visible if a USER created it or has been linked to it,

    4. LABELS are visible if a USER created it
    or has a PROJECT linked with this LABEL.

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
        IN ORDER TO CHECK SOMETHING YOU NEED TO HAVE A VERIBLE TO CHECK AGAINST
        MAYBE ITS ID THAT IS GIVEN IN JSON WITH YOUR GET?

        THERE IS A POSIBILITY THAT YOU WILL NEED TO RESTRUCTURE DELETE PERMISIONS TOO
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
    ABOVE SOLVED VIA API_TOKEN AUTH


2) HTTP Methods:

    1. USERS

        1. Add users (create & add an email with verification token
        (plain text) TO QUEUE)

        2. Verify user

        3. List users
        (filter by name OR/AND email OR/AND verified OR/AND country)

        4. Edit users

        5. Delete users
        (HINT: Pay attention to “userS”: bulk actions)


    2. PROJECTS

        1. Add projects

        2. Link projects to users

        3. List projects incl. labels
        (filter by user.email OR/AND user.continent OR/AND labels)

        4. Delete projects


    3. LABELS

        1. Add labels

        2. Link labels to projects

        3. List labels (filter by user.email OR/AND projects)

        4. Delete labels

///// WHAT TO DO /////


///// REQUIREMENTS /////

1. Use Git with proper commit messages
 (Make a clean initial commit & multiple afterward)

2. Use the latest stable Laravel version & follow its concepts

3. Use MySQL database

4. Add everything as Seed

5. Use RabbitMQ or MySQL for queues

6. Auto-generate docs (OpenAPI)

7. Use Laravel’s Migrations (incl. Seeding), Models, Queues & Service Providers

8. Pay attention to a good MySQL structure

9. Try to follow good principles of PHP (and Laravel)

10. NO FRONTEND required, only API (incl. DB)

///// REQUIREMENTS /////


///// ENTITIES /////

1. Users: Name, Email, Verified & Country (No Continent here please)
(seed some example data, min. 10 rows)
    users:
        id
        name
        email
        verified
        country
        cr at
        up at?
        del at
        country_id    BELOBGS TO Country
                        HAS MANY Projects    (who is creater?)
                        HAS MANY Labels      (who is creater?)
                        BELONGS TO MANY Projects  (add multiple PROJECTS to multiple USERS)



2. Projects: Name
    projects:
        id
        name
        cr_at
        up_at
        del_at
        creater_user_id    BELOBGS TO User   (who is creater?)
                    BELOBGS TO MANY Users    (add multiple PROJECTS to multiple USERS)
                    BELOBGS TO MANY Labels   (add multiple LABELS to multiple PROJECTS)


3. Labels: Name
    labels:
        id
        name
        cr at
        up at?
        del at
        creater_user_id    BELOBGS TO User     (who is creater?)
                            BELOBGS TO MANY Projects   (add multiple LABELS to multiple PROJECTS)


4. Countries: import from http://country.io/names.json
    countries:
        id
        country_name
        continent_id    BELOBGS TO Continent
                        HAS MANY Users


5. Continents: import from http://country.io/continent.json
    continents:
        id
        country_code
        continent_code
             HAS MANY countries



NOTE:   MANY TO MANY
table 6
Users_projects: ?
    id
    project_id
    user_id

table 7
labels_projects: ?
    id
    label_id
    project_id


PERSONAL NOTE:
https://stackoverflow.com/questions/1207983/in-general-should-every-table-in-a-database-have-an-identity-field-to-use-as-a
Countries and continets have a relationship, id is required.

PERSONAL NOTE JSON TO MYSQL TABLE:
https://stackoverflow.com/questions/39565093/how-to-include-data-from-json-to-mysql-in-laravel
PROBOLY USE THIS IN SEEDER
Maybe :(

///// ENTITIES /////

//// TASK \\\\//// TASK \\\\//// TASK \\\\//// TASK \\\\//// TASK \\\\//// TASK




//// NOTES \\\\//// NOTES \\\\//// NOTES \\\\//// NOTES \\\\//// NOTES \\\\ NOT

1.
EDITED VAGRANT

vagrant reload --provision

and install laravel LATEST STABLE

composer create-project laravel/laravel

2.
creating a website drawing


3.
wget -m http://country.io/names.json

wget -m http://country.io/continent.json




$response = Http::get('http://country.io/continent.json');

    foreach ($response->json() as $key => $value) {
        Continent::create([
            'country_code'   => $key,
            'continent_code' => $value
        ]);
    }

$response = Http::get('country.io/names.json');

    foreach ($response->json() as $key => $value) {
        $id = DB::table('continents')
            ->select('id')->where('country_code', $key)
                ->first();

        Country::create([
                'continent_id' => $id->id,
                'name'         => $value
            ]);
    }




4.
change .env


5.
https://www.toptal.com/laravel/restful-laravel-api-tutorial
will try to follow this for references

creating MODELS and MIGRATIONS

Users  already exists
php artisan make:model Project -m
php artisan make:model Label -m
php artisan make:model Country -m
php artisan make:model Continent -m


6.
edit migration just like planed above

7.
do all of the relationships in models

8.
run migrations

Migration order is shit

important NOTE:
https://stackoverflow.com/questions/32524101/laravel-change-migration-order
need to make a custom command
or change dates

BUT >:)
I HAVE THE POWER OF BASH!!!

///////////
#!/bin/bash
printf 'DIE YOU PATHETIC DB!\n'

php artisan db:wipe

printf '\nNOW REFRESHING DB.\n'

php artisan migrate:refresh  --path=/database/migrations/2021_03_29_235550_create_continents_table.php
php artisan migrate:refresh  --path=/database/migrations/2021_03_29_235541_create_countries_table.php
php artisan migrate:refresh  --path=/database/migrations/2014_10_12_000000_create_users_table.php
php artisan migrate:refresh  --path=/database/migrations/2021_03_29_235528_create_labels_table.php
php artisan migrate:refresh  --path=/database/migrations/2021_03_29_235512_create_projects_table.php


printf '\nSEEDING DB WITH DATA\n'

php artisan db:seed

printf '\nDONE! PLEASE CHECK YOUR DB.\n\n'
////////
////////////
now migrations go in order!


9)
seding

php artisan make:factory Label
php artisan make:factory Project



10)
ok
now I have all the date and tables completed
I need to represent it!

10. NO FRONTEND required, only API (incl. DB)
10. NO FRONTEND required, only API (incl. DB)
10. NO FRONTEND required, only API (incl. DB)
10. NO FRONTEND required, only API (incl. DB)

NO

just do api stuff


11)

For displaying meta data
php artisan make:resource UserCollection
php artisan make:resource ProjectCollection
php artisan make:resource LabelCollection

FOr displaying ONE entety
php artisan make:resource UserResource
php artisan make:resource ProjectResource
php artisan make:resource LabelResource






12)
making Controllers

php artisan make:controller UserController
php artisan make:controller ProjectController
php artisan make:controller LabelController
php artisan make:controller CountryController
php artisan make:controller ContinentController


13)
I need to filter stuff and I dont want to do it manualy

I will try to find some packagies for AUTOFILTERING

https://github.com/itsrennyman/laravel-rest-filters
lets try this one
WOW
WOW
WOW

ITS FUCKING AMAZING

/// USER ////
http://les.test/api/users

by email
http://les.test/api/users?email=gaetano87@example.org

by name
http://les.test/api/users?name=Dr. Deron Jacobi I

by verified
http://les.test/api/users?verified=0

by country
http://les.test/api/users?country_id=143

by country and name
http://les.test/api/users?country_id=143&name=Dr. Deron Jacobi I

/// PROJECT ////
http://les.test/api/projects

by name
http://les.test/api/projects?name=Sint.

by creater_user_id
http://les.test/api/projects?creater_user_id=1

by creater_user_id amd name
http://les.test/api/projects?creater_user_id=1&name=Esse.

NOTE: IN TASK ==== INCLUDING LABELS

by user.email

by user.continent

by labels


/// LABELS ////
http://les.test/api/labels

by name
http://les.test/api/labels?name=Vel%20fugit.

by creater_user_id
http://les.test/api/labels?creater_user_id=1

by user.email


by projects



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!  DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\
    CREATE FACTORIES FOR COUNTRIES AND CONTINENTS bc THEY ARE USED
!!!!!!!!!!!!!!!!!!  DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!! //NOPE//NOPE//NOPE//NOPE//NOPE//NOPE//NOPE//NOPE//NOPE//
    LEAVE COMMENTS IN MODEL, I MEAN THIS TELL WHICH sviaz IS WHICH.
!!!!!!!!!!!!!!!!!! //NOPE//NOPE//NOPE//NOPE//NOPE//NOPE//NOPE//NOPE//NOPE//
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!  DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\
    IMPORTANT! CHANGE DATES OF MIGRATIOS AND CHANGE YOUR BASH SCRIPT TO DO MIGRATIONS IN COMMAND
!!!!!!!!!!!!!!!!!!  DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!! DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\
    OPTIMIZE YOUR SEEDER, FOR EXAPLE YOUR ATTACHING OF CREATOR USER IS SHIT bc IT BOMBAARS DB IN FOREACH
!!!!!!!!!!!!!!!!!! DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\
//   NOTE: the seeder is OGEY could be better nut its fine! (hopefuly)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!! DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\
    PUT YOUR FILTERS INTO TRY CATCH BC THEY BLOW UP ON A BAD URL INPUT
!!!!!!!!!!!!!!!!!! DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\DONE\\\\\\\\\
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !
! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !
! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!
    PERMISIONS IN FILTER AND DISPLAY ALL
    No
    NO
    NO NO NO

    YOU FUCKED UP!

    1) do authentication with token
    maybe restucture your db

    2) then do filter permitions like was discused

    3) YOU MUST DO AVLIDATION


        NOTE 1
        MAYBE DO THIS
        $table->id();
        $table->foreignId('country_id');
        $table->string('name');
        $table->string('email')->unique();
        $table->timestamp('email_verified_at')->nullable();
        $table->string('verification_token')->nullable();
        $table->string('password');
        $table->rememberToken();
        $table->timestamps();
        $table->softDeletes();

        somehow you need to do authentication via token

        NOTE 2
        no supervisor is needed
        just exec artisan command for queue
        and give it in README.txt

/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
SOLVING PROBLEMS

1) Auth problem
https://laravel.com/docs/5.8/api-authentication#introduction

the version of docs is shit but I hope it will workout in the ned, somehow...
I will use 20 char token for simplicity.

also this
https://medium.com/@kevincristella/basic-token-based-api-authentication-with-laravel-aeed0050dd0d
NO NO NO
This guide is an outdated shit.
just use docs they actually work!


!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!! VICTORY!
    CREATE A FUCKING QUEUE FOR ADDING STUFF (CHECK TASK FOR MORE)
!!!!!!!!!!!!!!!!!! VICTORY!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!
    6. AUTO-GENERATE DOCS (OPENAPI)    DO THIS WHATVER THE FUCK IT IS
!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !
! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !
! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !! LAST STAND !


// Queues Queues Queues //

OGEY
do

php artisan queue:table
to make jobs migrtion

OGEY
first of all change .env to have db

QUEUE_CONNECTION=database

OGEY
now

php artisan make:job ProcessUser

CHANGE stuff by moving logick to job hendle
and in controller pass data to job on queue

DAN change
/etc/supervisor/conf.d/somthing_somthing

with a good config that execs your command like this

[program:my_laravel_jobs]
process_name=%(program_name)s_%(process_num)02d
command=php /home/vagrant/www/artisan queue:work --queue=process_user --tries=2
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=vagrant
numprocs=5
redirect_stderr=true
stdout_logfile=/home/vagrant/www/storage/logs/my_laravel_jobs.log
stopwaitsecs=10000

and start it!

sudo supervisorctl reread

sudo supervisorctl update

sudo supervisorctl start my_laravel_jobs:*

// Queues Queues Queues //







// Asura - Rain In Vains //

OGEY

TWO THINGS

1) FIX COLLECTIONS VIA THEIR CORRECT USAGE

2) VALIDATION


good luck!




// Asura - Rain In Vains //

















//// NOTES \\\\//// NOTES \\\\//// NOTES \\\\//// NOTES \\\\//// NOTES \\\\ NOT


//// URL WITH JSON AND TEST

 curl -X GET http://les.test/api/labels
 -H "Accept: application/json"
 -H "Content-Type: application/json"
 -d '{"name.email": "BOB.john.doe@toptal.com"}'


 curl -X GET http://les.test/api/labels
 -H "Accept: application/json"
 -H "Content-Type: application/json"
 -d '{"name": "john.doe@toptal.com", "email": "BOB"}'

curl -X GET http://les.test/api/labels -H "Accept: application/json" -H "Content-Type: application/json" -d '{"name": "BOB", "email": "john.doe@toptal.com"}'





/// USER ////


// http://les.test/api/users?name=Josh Crist
// http://les.test/api/users?country=us
// http://les.test/api/users?name=Beverly Brown PhD&verified=1
// http://les.test/api/users?name=Beverly Brown PhD&email=kmurphy@example.com&country=us
// http://les.test/api/users?country=pe&name=Beverly Brown PhD&verified=1
// http://les.test/api/users?country=pe&name=Beverly Brown PhD


// filters
curl -X GET http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"name": "Josh Crist"}'
curl -X GET http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"email": "leffler.devonte@example.org"}'
curl -X GET http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"verified": "0"}'
curl -X GET http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"country": "SC"}'

curl -X GET http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"name": "Josh Crist", "verified": "1", "country": "SC", "shit": "nugget"}'


// createe
curl -X POST http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"name": "BOB", "email": "bob.doe@toptal.com", "password": "12345", "country": "us"}'
curl -X POST http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"name": "BdddddOB", "email": "bob.dwwwwwoe@toptal.com", "password": "12345", "country": "ssus"}'

artisan queue:work --queue=process_user --tries=5

// verify
curl -X PATCH http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"name": "BOB"}'

// edit
curl -X PUT http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"name": "BOBssss22222", "email": "bob2222222.doe@tsssssoptal.com", "password": "12345", "country": "us", "api_token": "ozxqCIs8CkAOfbb7Yd84"}'

// delete
curl -X DELETE http://les.test/api/users -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "8ZR7dQS4pmkD82jUIGo9"}'


/// USER ////


/// LABELS ////

LABELS are visible if a USER created it
or has a PROJECT linked with this LABEL.

// http://les.test/api/labels
// http://les.test/api/labels?email=kraig.bins@example.org
// http://les.test/api/labels?projects[]=2
// http://les.test/api/labels?email=kraig.bins@example.org&projects[]=2

// filer
curl -X GET http://les.test/api/labels -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "7rLaAx1IXaApeLra8ag2"}'

curl -X GET http://les.test/api/labels -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "7rLaAx1IXaApeLra8ag2", "email": "leffler.devonte@example.org"}'
curl -X GET http://les.test/api/labels -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "7rLaAx1IXaApeLra8ag2", "projects":[1,2,3,4,5]}'
curl -X GET http://les.test/api/labels -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "7rLaAx1IXaApeLra8ag2", "email": "leffler.devonte@example.org", "projects":[1,2,3,4,5]}'

curl -X GET http://les.test/api/labels -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "7rLaAx1IXaApeLra8ag2", "email": "leffler.devonte@example.org", "projects":[1,2,3,4,5], "shit": "nagget"}'


// create
curl -X POST http://les.test/api/labels -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "ozxqCIs8CkAOfbb7Yd84", "label_name": "Label 13"}'

// delete
curl -X DELETE http://les.test/api/labels/ -H "Accept: application/json" -H "Content-Type: application/json" -d '{"id_of_a_label": "61", "api_token": "ozxqCIs8CkAOfbb7Yd84"}'

// link
curl -X PUT http://les.test/api/labels -H "Accept: application/json" -H "Content-Type: application/json" -d '{"label_id":[1,2], "project_id":[1,2,3,4,5]}'

/// LABELS ////


/// PROJECT ////

PROJECTS are visible if a USER created it or has been linked to it,


// filer
curl -X GET http://les.test/api/projects -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "IwWQGOq3JU97agJTIaw3"}'
curl -X GET http://les.test/api/projects -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "zsxswXiERXA1vio994px"}'


curl -X GET http://les.test/api/projects -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "IwWQGOq3JU97agJTIaw3", "email": "ckuhic@example.org"}'
curl -X GET http://les.test/api/projects -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "IwWQGOq3JU97agJTIaw3", "labels":[1,2,3,4,5]}'
curl -X GET http://les.test/api/projects -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "IwWQGOq3JU97agJTIaw3", "email": "leffler.devonte@example.org", "labels":[1,2,3,4,5]}'
curl -X GET http://les.test/api/projects -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "IwWQGOq3JU97agJTIaw3", "continent": "na"}'
curl -X GET http://les.test/api/projects -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "IwWQGOq3JU97agJTIaw3", "email": "ckuhic@example.org", "labels":[1,2,3,4,5], "continent": "na"}'

curl -X GET http://les.test/api/projects -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "IwWQGOq3JU97agJTIaw3", "shit": "nagget"}'
curl -X GET http://les.test/api/projects -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "IwWQGOq3JU97agJTIaw3", "shit": "nagget", "continent": "af"}'



// create
curl -X POST http://les.test/api/projects/ -H "Accept: application/json" -H "Content-Type: application/json" -d '{"api_token": "ozxqCIs8CkAOfbb7Yd84", "project_name": "Project 3"}'


// link
curl -X PUT http://les.test/api/projects/ -H "Accept: application/json" -H "Content-Type: application/json" -d '{"project_id":[10,12], "user_id":[1,2,3,4,5]}'

// delete
curl -X DELETE http://les.test/api/projects/ -H "Accept: application/json" -H "Content-Type: application/json" -d '{"id_of_a_project": "41", "api_token": "ozxqCIs8CkAOfbb7Yd84"}'



/// PROJECT ////


















        // NEW WAY //
        // https://github.com/mehdi-fathi/eloquent-filter

        // http://les.test/api/labels
        // http://les.test/api/labels?projects[name]=Velit sit.
        // WORKS
        // http://les.test/api/labels?users[name]=Kody Beier&users[email]=schoen.johnpaul@example.com
        // http://les.test/api/labels?user[email]=joel73@example.org
        // http://les.test/api/labels?user[id]=2
        // http://lestest/api/labels?users;\=sss
        // http://les.test/api/projects?users[name]=Kody Beier&users[email]=schoen.johnpaul@example.com&labels[name]=Iusto%20voluptas.

        // NEW WAY //












































//:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://
//:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://
//:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://:\\://
